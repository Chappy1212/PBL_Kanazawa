<!-- exchangeChart.ejs - レンズ交換までの日数を円グラフで表示するパーシャル -->
<% if (typeof daysUntilExchange !== 'undefined') { %>
<div class="mt-4 text-center">
    <!-- <h4 class="text-center fw-bold text-primary mb-3">交換日まで</h4> -->
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="chart-container position-relative" style="height:240px; width:240px; margin:0 auto;">
                <canvas id="exchangeChart"></canvas>
                <div id="chartCenterText" class="position-absolute start-50 translate-middle text-center" style="z-index: 10; top: 45%;" title="残り<%= Math.max(0, daysUntilExchange) %>日">
                        <div class="fs-1 fw-bold text-primary text-shadow" style="text-shadow: 0 2px 8px rgba(54,162,235,0.3);"><%= Math.max(0, daysUntilExchange) %></div>
                        <div class="fs-6 fw-semibold text-secondary mt-1" style="letter-spacing: 0.1em;">残り日数</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Chart.jsがロードされていることを確認
        if (typeof Chart === 'undefined') {
            console.error('Chart.js is not loaded');
            return;
        }

        const chartElement = document.getElementById('exchangeChart');
        if (chartElement) {
            // レンズタイプに基づいた標準交換期間を設定
            let standardExchangePeriod = 0;
            const lensType = '<%= lensInfos && lensInfos[0] ? lensInfos[0].type : "" %>';
            
            if (lensType === '1day') {
                standardExchangePeriod = 1;
            } else if (lensType === '2week') {
                standardExchangePeriod = 14;
            } else if (lensType === '1month') {
                standardExchangePeriod = 30;
            } else {
                // デフォルト値（タイプが不明な場合）
                standardExchangePeriod = 14;
            }
            
            const remainingDays = Math.max(0, Number('<%= daysUntilExchange %>'));
            const daysUsed = standardExchangePeriod - remainingDays;
            
            // グラデーションの作成
            const ctx = chartElement.getContext('2d');
            
            // 使用済み部分のグラデーション - 白色
            const usedGradient = ctx.createLinearGradient(0, 0, 0, 400);
            usedGradient.addColorStop(0, 'rgba(255, 255, 255, 0.9)');  // 明るい白色
            usedGradient.addColorStop(1, 'rgba(240, 240, 240, 0.9)');  // 若干灰色がかった白
            
            // 残り日数部分のグラデーション - 青系
            const remainingGradient = ctx.createLinearGradient(0, 0, 0, 400);
            remainingGradient.addColorStop(0, 'rgba(54, 162, 235, 0.9)');  // 濃い青
            remainingGradient.addColorStop(1, 'rgba(54, 162, 235, 0.6)');  // 薄い青

            // 円グラフの作成
            const chart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['残り日数', '使用済み'],
                    datasets: [{
                        data: [remainingDays, daysUsed],
                        backgroundColor: [remainingGradient, usedGradient],
                        borderColor: ['rgba(54, 162, 235, 1)', 'rgba(200, 200, 200, 1)'],
                        borderWidth: 2,
                        hoverBorderWidth: 3,
                        hoverBorderColor: ['rgba(25, 130, 200, 1)', 'rgba(180, 180, 180, 1)'], // ホバー時はより濃い色に
                        hoverBackgroundColor: [remainingGradient, usedGradient],
                    }]
                },
                options: {
                    cutout: '70%',  // ドーナツの穴の大きさを大きくする
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        animateScale: false,
                        animateRotate: true,
                        duration: 2000, // アニメーション時間を長くする
                        easing: 'easeOutCirc' // イージング効果を追加
                    },
                    plugins: {
                        legend: {
                            position: 'bottom',
                            onClick: null, // 凡例クリック時の動作を無効化（線が入らなくなる）
                            labels: {
                                font: {
                                    family: 'Arial',
                                    size: 12,
                                    weight: 'bold'
                                },
                                padding: 20,
                                usePointStyle: true, // 凡例をポイントスタイルに変更
                                pointStyle: 'circle'
                            }
                        },
                        tooltip: {
                           enabled: false
                        }
                    }
                }
            });
            
            // チャートが完全にレンダリングされた後に中央のテキストを適切に配置
            chart.options.animation.onComplete = function() {
                const centerElement = document.getElementById('chartCenterText');
                if (centerElement) {
                    // カラー設定
                    // 残り日数によって色を変える
                        const mainText = centerElement.querySelector('.fs-1');
                        if (remainingDays <= 1) {
                            mainText.classList.remove('text-primary');
                            mainText.classList.add('text-danger');
                            mainText.style.textShadow = '0 2px 12px rgba(220,53,69,0.3)';
                        } else if (remainingDays <= 3) {
                            mainText.classList.remove('text-primary');
                            mainText.classList.add('text-warning');
                            mainText.style.textShadow = '0 2px 12px rgba(255,193,7,0.3)';
                        } else {
                            mainText.classList.add('text-primary');
                            mainText.style.textShadow = '0 2px 8px rgba(54,162,235,0.3)';
                    }
                }
            };
        }
    });
</script>
<% } %>
